### originally made in google drive since my computer's not quite set up yet, but it should work locally.

# -*- coding: utf-8 -*-
"""Data Handler

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16Lo0OlsI4m2x--frL0F9EZlIkUkBTlpo
"""

# external
import numpy as np

# from google.colab import drive
# drive.mount('/content/drive')
import pandas as pd

# old_file=pd.read_csv("/content/drive/MyDrive/Colab Notebooks/APS360/track_list.csv")
old_file = pd.read_csv("track_list.csv")

# columns to keep from dataset, skip_1 || with skip_2 to make new skip
# turns out to be equivalent to skip_2 column
to_keep = [
    "session_id",
    "session_position",
    "session_length",
    "track_id_clean",
    "skip_2",
]

new_file = old_file[to_keep]

# change column names.
new_file.columns = [
    "session_id",
    "session_position",
    "session_length",
    "track_id",
    "skip",
]
print(new_file.head())

# save as shortened track_list
# new_file.to_csv("/content/drive/MyDrive/Colab Notebooks/APS360/trimmed_track_list.csv", index=False)

# when pandas does merge, ordering is lost. Function from https://stackoverflow.com/questions/20206615/how-can-a-pandas-merge-preserve-order.
# it copies the first column of the first dataset (in our case, the track_list)
# and orders the merged data by that
def mergeLeftInOrder(x, y, on=None):
    x = x.copy()
    x["Order"] = np.arange(len(x))
    z = x.merge(y, how="left", on=on).set_index("Order").loc[np.arange(len(x)), :]
    return z


# features=pd.read_csv("/content/drive/MyDrive/Colab Notebooks/APS360/track_features.csv")
features = pd.read_csv("track_features.csv")

merged = mergeLeftInOrder(new_file, features)

# uncomment if want to remove track_id and session_id columns
# merged.drop(columns=['track_id', 'session_id'], inplace=True)

# merged.to_csv("/content/drive/MyDrive/Colab Notebooks/APS360/trimmed_merged.csv", index=False)
merged.to_csv("trimmed_merged.csv", index=False)
